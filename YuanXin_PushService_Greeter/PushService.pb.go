// Code generated by protoc-gen-go.
// source: PushService.proto
// DO NOT EDIT!

/*
Package YuanXin_PushService_Greeter is a generated protocol buffer package.

It is generated from these files:
	PushService.proto

It has these top-level messages:
	PushModel
	PushSystemModel
	Result
*/
package YuanXin_PushService_Greeter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PushModel struct {
	Appid   string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Alert   string `protobuf:"bytes,3,opt,name=alert" json:"alert,omitempty"`
	Type    int32  `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Heards  string `protobuf:"bytes,5,opt,name=heards" json:"heards,omitempty"`
	Action  string `protobuf:"bytes,6,opt,name=action" json:"action,omitempty"`
	Rangeid string `protobuf:"bytes,7,opt,name=rangeid" json:"rangeid,omitempty"`
	Userids string `protobuf:"bytes,8,opt,name=userids" json:"userids,omitempty"`
	Sender  int64  `protobuf:"varint,9,opt,name=sender" json:"sender,omitempty"`
	Groupid int64  `protobuf:"varint,10,opt,name=groupid" json:"groupid,omitempty"`
}

func (m *PushModel) Reset()                    { *m = PushModel{} }
func (m *PushModel) String() string            { return proto.CompactTextString(m) }
func (*PushModel) ProtoMessage()               {}
func (*PushModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PushModel) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *PushModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PushModel) GetAlert() string {
	if m != nil {
		return m.Alert
	}
	return ""
}

func (m *PushModel) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PushModel) GetHeards() string {
	if m != nil {
		return m.Heards
	}
	return ""
}

func (m *PushModel) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *PushModel) GetRangeid() string {
	if m != nil {
		return m.Rangeid
	}
	return ""
}

func (m *PushModel) GetUserids() string {
	if m != nil {
		return m.Userids
	}
	return ""
}

func (m *PushModel) GetSender() int64 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *PushModel) GetGroupid() int64 {
	if m != nil {
		return m.Groupid
	}
	return 0
}

type PushSystemModel struct {
	Appid   string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Uid     int64  `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
}

func (m *PushSystemModel) Reset()                    { *m = PushSystemModel{} }
func (m *PushSystemModel) String() string            { return proto.CompactTextString(m) }
func (*PushSystemModel) ProtoMessage()               {}
func (*PushSystemModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PushSystemModel) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *PushSystemModel) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PushSystemModel) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Result struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Stauts  int32  `protobuf:"varint,2,opt,name=stauts" json:"stauts,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Result) GetStauts() int32 {
	if m != nil {
		return m.Stauts
	}
	return 0
}

func init() {
	proto.RegisterType((*PushModel)(nil), "YuanXin.PushService.Greeter.PushModel")
	proto.RegisterType((*PushSystemModel)(nil), "YuanXin.PushService.Greeter.PushSystemModel")
	proto.RegisterType((*Result)(nil), "YuanXin.PushService.Greeter.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	GrpcPushMessage(ctx context.Context, in *PushModel, opts ...grpc.CallOption) (*Result, error)
	GrpcPushSystemMessage(ctx context.Context, in *PushSystemModel, opts ...grpc.CallOption) (*Result, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GrpcPushMessage(ctx context.Context, in *PushModel, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/YuanXin.PushService.Greeter.Service/GrpcPushMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GrpcPushSystemMessage(ctx context.Context, in *PushSystemModel, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/YuanXin.PushService.Greeter.Service/GrpcPushSystemMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	GrpcPushMessage(context.Context, *PushModel) (*Result, error)
	GrpcPushSystemMessage(context.Context, *PushSystemModel) (*Result, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_GrpcPushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GrpcPushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YuanXin.PushService.Greeter.Service/GrpcPushMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GrpcPushMessage(ctx, req.(*PushModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GrpcPushSystemMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSystemModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GrpcPushSystemMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YuanXin.PushService.Greeter.Service/GrpcPushSystemMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GrpcPushSystemMessage(ctx, req.(*PushSystemModel))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "YuanXin.PushService.Greeter.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrpcPushMessage",
			Handler:    _Service_GrpcPushMessage_Handler,
		},
		{
			MethodName: "GrpcPushSystemMessage",
			Handler:    _Service_GrpcPushSystemMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PushService.proto",
}

func init() { proto.RegisterFile("PushService.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0x3f, 0x4f, 0xf3, 0x30,
	0x10, 0xc6, 0xdf, 0xbc, 0x69, 0x52, 0x7a, 0x4b, 0xc1, 0x02, 0x64, 0xc1, 0x52, 0x05, 0x09, 0x75,
	0x40, 0x19, 0x60, 0xe3, 0x0b, 0x74, 0x42, 0x42, 0xe9, 0x02, 0x1b, 0x26, 0x3e, 0xb5, 0x96, 0x52,
	0x27, 0xf2, 0x1f, 0xa4, 0x7e, 0x54, 0x3e, 0x09, 0x2b, 0xf2, 0xc5, 0x46, 0x9d, 0x0a, 0x9b, 0x7f,
	0xf7, 0x3c, 0xbe, 0xf3, 0xdd, 0x19, 0xce, 0x9e, 0xbd, 0xdd, 0xae, 0xd1, 0x7c, 0xa8, 0x16, 0xeb,
	0xc1, 0xf4, 0xae, 0x67, 0xd7, 0xaf, 0x5e, 0xe8, 0x17, 0xa5, 0xeb, 0x43, 0x69, 0x65, 0x10, 0x1d,
	0x9a, 0xea, 0x2b, 0x83, 0x59, 0x88, 0x3f, 0xf5, 0x12, 0x3b, 0x76, 0x0e, 0x85, 0x18, 0x06, 0x25,
	0x79, 0xb6, 0xc8, 0x96, 0xb3, 0x66, 0x84, 0x10, 0x75, 0xca, 0x75, 0xc8, 0xff, 0x8f, 0x51, 0x02,
	0xf2, 0x76, 0x68, 0x1c, 0xcf, 0xa3, 0x37, 0x00, 0x63, 0x30, 0x71, 0xfb, 0x01, 0xf9, 0x64, 0x91,
	0x2d, 0x8b, 0x86, 0xce, 0xec, 0x12, 0xca, 0x2d, 0x0a, 0x23, 0x2d, 0x2f, 0xc8, 0x1a, 0x29, 0xc4,
	0x45, 0xeb, 0x54, 0xaf, 0x79, 0x39, 0xc6, 0x47, 0x62, 0x1c, 0xa6, 0x46, 0xe8, 0x0d, 0x2a, 0xc9,
	0xa7, 0x24, 0x24, 0x0c, 0x8a, 0xb7, 0x68, 0x94, 0xb4, 0xfc, 0x64, 0x54, 0x22, 0x86, 0x5c, 0x16,
	0xb5, 0x44, 0xc3, 0x67, 0x8b, 0x6c, 0x99, 0x37, 0x91, 0xc2, 0x8d, 0x8d, 0xe9, 0x7d, 0xe8, 0x09,
	0x48, 0x48, 0x58, 0xad, 0x61, 0x4e, 0x03, 0xd9, 0x5b, 0x87, 0xbb, 0x63, 0xed, 0x9f, 0x42, 0xee,
	0x95, 0xa4, 0xe6, 0xf3, 0x26, 0x1c, 0x43, 0xd2, 0xb6, 0xd7, 0x0e, 0x75, 0x6a, 0x3e, 0x61, 0xf5,
	0x08, 0x65, 0x83, 0xd6, 0x77, 0x2e, 0x78, 0x76, 0x68, 0xad, 0xd8, 0x60, 0xcc, 0x96, 0x90, 0x9e,
	0xea, 0x84, 0x77, 0x96, 0x52, 0x16, 0x4d, 0xa4, 0xfb, 0xcf, 0x0c, 0xa6, 0x71, 0x3d, 0xec, 0x0d,
	0xe6, 0x2b, 0x33, 0xb4, 0xb4, 0x99, 0x78, 0xed, 0xb6, 0x3e, 0xb2, 0xc7, 0xfa, 0x67, 0x87, 0x57,
	0x37, 0x47, 0x7d, 0xe3, 0xeb, 0xaa, 0x7f, 0xac, 0x83, 0x8b, 0x54, 0x21, 0x8e, 0x20, 0xd6, 0xb9,
	0xfb, 0xb5, 0xce, 0xc1, 0xc8, 0xfe, 0x58, 0xed, 0xbd, 0xa4, 0xaf, 0xf8, 0xf0, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x53, 0x9a, 0xe4, 0xd0, 0x9f, 0x02, 0x00, 0x00,
}
